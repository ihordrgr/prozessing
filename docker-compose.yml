version: '3.8'

services:
  # Frontend service
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
    container_name: vip-frontend
    ports:
      - "80:80"
    restart: unless-stopped
    networks:
      - vip-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost/"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # Backend service (Telegram bot)
  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
    container_name: vip-backend
    environment:
      - BOT_TOKEN=${BOT_TOKEN:-7390676234:AAHpDU9hgmV-nLCT4cBFCvidp92RDk3uw2I}
      - WEBHOOK_URL=${WEBHOOK_URL:-}
      - ADMIN_CHAT_ID=${ADMIN_CHAT_ID:-}
      - DATABASE_URL=${DATABASE_URL:-}
    restart: unless-stopped
    networks:
      - vip-network
    depends_on:
      - redis
    volumes:
      - bot_data:/app/data
    healthcheck:
      test: ["CMD", "python", "-c", "import asyncio; print('Bot is healthy')"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # Redis for caching and session storage
  redis:
    image: redis:7-alpine
    container_name: vip-redis
    restart: unless-stopped
    networks:
      - vip-network
    volumes:
      - redis_data:/data
    command: redis-server --appendonly yes --requirepass ${REDIS_PASSWORD:-vip_redis_pass}
    healthcheck:
      test: ["CMD", "redis-cli", "--raw", "incr", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Optional: Database service (PostgreSQL)
  database:
    image: postgres:15-alpine
    container_name: vip-database
    environment:
      - POSTGRES_DB=${POSTGRES_DB:-vip_club}
      - POSTGRES_USER=${POSTGRES_USER:-vip_user}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD:-vip_secure_password}
    restart: unless-stopped
    networks:
      - vip-network
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./backend/init.sql:/docker-entrypoint-initdb.d/init.sql
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER:-vip_user} -d ${POSTGRES_DB:-vip_club}"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Optional: Nginx reverse proxy
  nginx:
    image: nginx:alpine
    container_name: vip-nginx
    ports:
      - "443:443"
    restart: unless-stopped
    networks:
      - vip-network
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf
      - ./nginx/ssl:/etc/nginx/ssl
    depends_on:
      - frontend
    profiles:
      - production

networks:
  vip-network:
    driver: bridge

volumes:
  bot_data:
    driver: local
  redis_data:
    driver: local
  postgres_data:
    driver: local
import asyncio
import os
from aiogram import Bot, Dispatcher, types, F
from aiogram.client.default import DefaultBotProperties
from aiogram.types import Message, InlineKeyboardButton, InlineKeyboardMarkup
from aiogram.enums import ParseMode
from aiogram.filters import CommandStart
import logging
from supabase_integration import supabase_client

# Configure logging
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

BOT_TOKEN = os.getenv("BOT_TOKEN")
if not BOT_TOKEN:
    raise ValueError("BOT_TOKEN environment variable is required")

bot = Bot(
    token=BOT_TOKEN,
    default=DefaultBotProperties(parse_mode=ParseMode.HTML)
)
dp = Dispatcher()


@dp.message(CommandStart())
async def cmd_start(message: Message):
    """Handle /start command"""
    user = message.from_user
    
    # Create or update user profile in Supabase
    try:
        await supabase_client.create_or_update_profile(
            telegram_id=user.id,
            user_data={
                "username": user.username,
                "full_name": user.full_name
            }
        )
        
        # Log user start action
        await supabase_client.log_user_action(
            telegram_id=user.id,
            action="bot_started",
            details={"username": user.username}
        )
    except Exception as e:
        logger.error(f"Error updating user profile: {e}")
    
    # Check if user already has VIP access
    try:
        access_status = await supabase_client.check_vip_access(user.id)
        if access_status.get("has_access"):
            keyboard = InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="üéØ –í–æ–π—Ç–∏ –≤ VIP —á–∞—Ç", url="https://t.me/your_vip_chat")],
                [InlineKeyboardButton(text="üìä –ú–æ–π –ø—Ä–æ—Ñ–∏–ª—å", callback_data="profile")]
            ])
            
            welcome_text = (
                f"üéâ <b>–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, {user.first_name}!</b>\n\n"
                "‚úÖ –£ –≤–∞—Å —É–∂–µ –µ—Å—Ç—å VIP –¥–æ—Å—Ç—É–ø!\n\n"
                f"üìÖ –î–µ–π—Å—Ç–≤—É–µ—Ç –¥–æ: {access_status.get('expires_at', '–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')}\n\n"
                "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –Ω–∏–∂–µ:"
            )
            
            await message.answer(welcome_text, reply_markup=keyboard)
            return
    except Exception as e:
        logger.error(f"Error checking VIP access: {e}")
    
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üí≥ –û–ø–ª–∞—Ç–∏—Ç—å –¥–æ—Å—Ç—É–ø", callback_data="pay")],
        [InlineKeyboardButton(text="üìã –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è", callback_data="instructions")],
        [InlineKeyboardButton(text="üìä –ú–æ–π –ø—Ä–æ—Ñ–∏–ª—å", callback_data="profile")]
    ])
    
    welcome_text = (
        f"üî• <b>–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ VIP –ö–ª—É–±, {user.first_name}!</b>\n\n"
        "–î–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –¥–æ—Å—Ç—É–ø–∞ –∫ —ç–∫—Å–∫–ª—é–∑–∏–≤–Ω—ã–º –º–∞—Ç–µ—Ä–∏–∞–ª–∞–º "
        "–Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –ø—Ä–æ–∏–∑–≤–µ—Å—Ç–∏ –æ–ø–ª–∞—Ç—É.\n\n"
        "üíé <b>–ß—Ç–æ –≤—ã –ø–æ–ª—É—á–∏—Ç–µ:</b>\n"
        "‚Ä¢ –î–æ—Å—Ç—É–ø –∫ –∑–∞–∫—Ä—ã—Ç–æ–º—É VIP —á–∞—Ç—É\n"
        "‚Ä¢ –≠–∫—Å–∫–ª—é–∑–∏–≤–Ω—ã–µ –º–∞—Ç–µ—Ä–∏–∞–ª—ã\n"
        "‚Ä¢ –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç–Ω–∞—è –ø–æ–¥–¥–µ—Ä–∂–∫–∞\n"
        "‚Ä¢ –û—Å–æ–±—ã–µ –ø—Ä–∏–≤–∏–ª–µ–≥–∏–∏\n\n"
        "–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ –¥–ª—è –æ–ø–ª–∞—Ç—ã:"
    )
    
    await message.answer(welcome_text, reply_markup=keyboard)


@dp.callback_query(F.data == "profile")
async def show_profile(callback_query: types.CallbackQuery):
    """Show user profile information"""
    user = callback_query.from_user
    
    try:
        # Get user profile
        profile = await supabase_client.get_user_profile(user.id)
        payments = await supabase_client.get_user_payments(user.id)
        access_status = await supabase_client.check_vip_access(user.id)
        
        profile_text = f"üë§ <b>–ü—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è</b>\n\n"
        profile_text += f"üÜî ID: {user.id}\n"
        profile_text += f"üë§ –ò–º—è: {user.full_name or user.first_name}\n"
        
        if user.username:
            profile_text += f"üìù Username: @{user.username}\n"
        
        profile_text += f"\nüíé <b>VIP –°—Ç–∞—Ç—É—Å:</b> "
        if access_status.get("has_access"):
            profile_text += f"‚úÖ –ê–∫—Ç–∏–≤–µ–Ω\n"
            profile_text += f"üìÖ –î–æ: {access_status.get('expires_at', '–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')}\n"
        else:
            profile_text += f"‚ùå –ù–µ–∞–∫—Ç–∏–≤–µ–Ω\n"
            profile_text += f"‚ùì –ü—Ä–∏—á–∏–Ω–∞: {access_status.get('reason', '–ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞')}\n"
        
        profile_text += f"\nüí≥ <b>–ü–ª–∞—Ç–µ–∂–µ–π:</b> {len(payments)}\n"
        
        if payments:
            verified_payments = [p for p in payments if p.get('status') == 'verified']
            profile_text += f"‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–æ: {len(verified_payments)}\n"
        
        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="üí≥ –û–ø–ª–∞—Ç–∏—Ç—å –¥–æ—Å—Ç—É–ø", callback_data="pay")],
            [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="back_to_start")]
        ])
        
        await callback_query.message.edit_text(profile_text, reply_markup=keyboard)
        
    except Exception as e:
        logger.error(f"Error showing profile: {e}")
        await callback_query.message.edit_text(
            "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –ø—Ä–æ—Ñ–∏–ª—è. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
            reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="back_to_start")]
            ])
        )


@dp.callback_query(F.data == "instructions")
async def show_instructions(callback_query: types.CallbackQuery):
    """Show payment instructions"""
    instructions_text = (
        "üìã <b>–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è –ø–æ –æ–ø–ª–∞—Ç–µ:</b>\n\n"
        "1Ô∏è‚É£ –ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É '–û–ø–ª–∞—Ç–∏—Ç—å –¥–æ—Å—Ç—É–ø'\n"
        "2Ô∏è‚É£ –ü—Ä–æ–∏–∑–≤–µ–¥–∏—Ç–µ –æ–ø–ª–∞—Ç—É –ª—é–±—ã–º —É–¥–æ–±–Ω—ã–º —Å–ø–æ—Å–æ–±–æ–º\n"
        "3Ô∏è‚É£ –°–¥–µ–ª–∞–π—Ç–µ —Å–∫—Ä–∏–Ω—à–æ—Ç –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –æ–ø–ª–∞—Ç—ã\n"
        "4Ô∏è‚É£ –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–∫—Ä–∏–Ω—à–æ—Ç –≤ —ç—Ç–æ—Ç –±–æ—Ç\n"
        "5Ô∏è‚É£ –ü–æ–ª—É—á–∏—Ç–µ –º–≥–Ω–æ–≤–µ–Ω–Ω—ã–π –¥–æ—Å—Ç—É–ø –∫ VIP —Ä–∞–∑–¥–µ–ª—É\n\n"
        "üí° <b>–í–∞–∂–Ω–æ:</b> –î–æ—Å—Ç—É–ø –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è–µ—Ç—Å—è –≤ —Ç–µ—á–µ–Ω–∏–µ 5 –º–∏–Ω—É—Ç –ø–æ—Å–ª–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –æ–ø–ª–∞—Ç—ã."
    )
    
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üí≥ –û–ø–ª–∞—Ç–∏—Ç—å –¥–æ—Å—Ç—É–ø", callback_data="pay")],
        [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="back_to_start")]
    ])
    
    await callback_query.message.edit_text(instructions_text, reply_markup=keyboard)


@dp.callback_query(F.data == "back_to_start")
async def back_to_start(callback_query: types.CallbackQuery):
    """Return to start menu"""
    # Create a fake message object to reuse cmd_start
    fake_message = callback_query.message
    fake_message.from_user = callback_query.from_user
    await cmd_start(fake_message)


@dp.callback_query(F.data == "pay")
async def process_payment(callback_query: types.CallbackQuery):
    """Handle payment process"""
    user = callback_query.from_user
    
    try:
        # Create payment record in Supabase
        payment = await supabase_client.create_payment(
            telegram_id=user.id,
            amount=500.0,
            payment_method="telegram_bot"
        )
        
        # Store payment ID in user session (you might want to use Redis for this)
        # For now, we'll include it in callback data
        payment_id = payment.get('id')
        
        # Log payment initiation
        await supabase_client.log_user_action(
            telegram_id=user.id,
            action="payment_initiated",
            details={"payment_id": payment_id, "amount": 500}
        )
        
    except Exception as e:
        logger.error(f"Error creating payment: {e}")
        await callback_query.message.edit_text(
            "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø–ª–∞—Ç–µ–∂–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
            reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="back_to_start")]
            ])
        )
        return
    
    payment_text = (
        "üí≥ <b>–û–ø–ª–∞—Ç–∞ –¥–æ—Å—Ç—É–ø–∞</b>\n\n"
        "–°—Ç–æ–∏–º–æ—Å—Ç—å VIP –¥–æ—Å—Ç—É–ø–∞: <b>500 —Ä—É–±–ª–µ–π</b>\n\n"
        "üí∞ <b>–°–ø–æ—Å–æ–±—ã –æ–ø–ª–∞—Ç—ã:</b>\n"
        "‚Ä¢ –ë–∞–Ω–∫–æ–≤—Å–∫–∞—è –∫–∞—Ä—Ç–∞\n"
        "‚Ä¢ –°–ë–ü (–°–∏—Å—Ç–µ–º–∞ –±—ã—Å—Ç—Ä—ã—Ö –ø–ª–∞—Ç–µ–∂–µ–π)\n"
        "‚Ä¢ –ö—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç–∞\n"
        "‚Ä¢ –≠–ª–µ–∫—Ç—Ä–æ–Ω–Ω—ã–µ –∫–æ—à–µ–ª—å–∫–∏\n\n"
        "–ü–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–∫—Ä–∏–Ω—à–æ—Ç –≤ —ç—Ç–æ—Ç –±–æ—Ç –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è.\n\n"
        f"üÜî <b>ID –ø–ª–∞—Ç–µ–∂–∞:</b> <code>{payment_id}</code>"
    )
    
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="‚úÖ –Ø –æ–ø–ª–∞—Ç–∏–ª", callback_data=f"payment_done:{payment_id}")],
        [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="back_to_start")]
    ])
    
    await callback_query.message.edit_text(payment_text, reply_markup=keyboard)


@dp.callback_query(F.data.startswith("payment_done:"))
async def payment_confirmation(callback_query: types.CallbackQuery):
    """Handle payment confirmation"""
    user = callback_query.from_user
    payment_id = callback_query.data.split(":")[1] if ":" in callback_query.data else None
    
    await callback_query.message.edit_text(
        "‚è≥ <b>–ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–ø–ª–∞—Ç—É...</b>\n\n–ü–æ–¥–æ–∂–¥–∏—Ç–µ –Ω–µ—Å–∫–æ–ª—å–∫–æ —Å–µ–∫—É–Ω–¥..."
    )
    
    # Simulate payment verification delay
    await asyncio.sleep(3)
    
    try:
        if payment_id:
            # Verify payment using Supabase
            result = await supabase_client.verify_payment(payment_id, verified=True)
            
            if result.get("success"):
                access_link = result.get("access_link")
                expires_at = result.get("expires_at")
                
                success_text = (
                    "‚úÖ <b>–û–ø–ª–∞—Ç–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞!</b>\n\n"
                    "üéâ –ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º! –í—ã –ø–æ–ª—É—á–∏–ª–∏ VIP –¥–æ—Å—Ç—É–ø.\n\n"
                    f"üîó <b>–í–∞—à–∞ —Å—Å—ã–ª–∫–∞ –¥–ª—è –≤—Ö–æ–¥–∞:</b>\n{access_link}\n\n"
                    f"üìÖ <b>–î–µ–π—Å—Ç–≤—É–µ—Ç –¥–æ:</b> {expires_at}\n\n"
                    "üíé –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ VIP –∫–ª—É–±!"
                )
                await callback_query.message.edit_text(success_text)
                
                # Log successful verification
                await supabase_client.log_user_action(
                    telegram_id=user.id,
                    action="payment_verified",
                    details={"payment_id": payment_id, "access_link": access_link}
                )
                return
        
        # If we get here, payment verification failed
        error_text = (
            "‚ùå <b>–û–ø–ª–∞—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞</b>\n\n"
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–∫—Ä–∏–Ω—à–æ—Ç –æ–ø–ª–∞—Ç—ã –∏–ª–∏ "
            "–æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É."
        )
        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="üîÑ –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å–Ω–æ–≤–∞", callback_data=f"payment_done:{payment_id}")],
            [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="pay")]
        ])
        await callback_query.message.edit_text(error_text, reply_markup=keyboard)
        
    except Exception as e:
        logger.error(f"Error verifying payment: {e}")
        await callback_query.message.edit_text(
            "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –ø–ª–∞—Ç–µ–∂–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
            reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="back_to_start")]
            ])
        )


@dp.message(F.photo)
async def handle_payment_screenshot(message: Message):
    """Handle payment screenshot uploads"""
    user = message.from_user
    
    await message.answer(
        "üì∏ <b>–°–∫—Ä–∏–Ω—à–æ—Ç –ø–æ–ª—É—á–µ–Ω!</b>\n\n"
        "–ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–∞—à—É –æ–ø–ª–∞—Ç—É... –≠—Ç–æ –∑–∞–π–º–µ—Ç –Ω–µ—Å–∫–æ–ª—å–∫–æ –º–∏–Ω—É—Ç."
    )
    
    try:
        # Get the largest photo
        photo = message.photo[-1]
        
        # Download photo
        file_info = await bot.get_file(photo.file_id)
        file_data = await bot.download_file(file_info.file_path)
        
        # Upload to Supabase Storage
        file_path = f"screenshots/{user.id}_{photo.file_id}.jpg"
        screenshot_url = await supabase_client.upload_file_to_storage(
            bucket="payment-screenshots",
            file_path=file_path,
            file_data=file_data.read()
        )
        
        # Find the most recent pending payment for this user
        payments = await supabase_client.get_user_payments(user.id)
        pending_payment = next((p for p in payments if p.get('status') == 'pending'), None)
        
        if pending_payment:
            # Update payment with screenshot
            await supabase_client.update_payment_screenshot(
                payment_id=pending_payment['id'],
                screenshot_url=screenshot_url
            )
            
            # Log screenshot upload
            await supabase_client.log_user_action(
                telegram_id=user.id,
                action="screenshot_uploaded",
                details={
                    "payment_id": pending_payment['id'],
                    "screenshot_url": screenshot_url
                }
            )
            
            # Simulate verification process (in real app, this would be manual or AI-based)
            await asyncio.sleep(2)
            
            # Auto-verify for demo (in production, this would be manual review)
            result = await supabase_client.verify_payment(pending_payment['id'], verified=True)
            
            if result.get("success"):
                access_link = result.get("access_link")
                await message.answer(
                    "‚úÖ <b>–û–ø–ª–∞—Ç–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞!</b>\n\n"
                    f"üîó <b>–í–∞—à–∞ —Å—Å—ã–ª–∫–∞:</b>\n{access_link}\n\n"
                    "üíé –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ VIP –∫–ª—É–±!"
                )
            else:
                await message.answer(
                    "‚ùå <b>–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –æ–ø–ª–∞—Ç—É</b>\n\n"
                    "–°–∫—Ä–∏–Ω—à–æ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω. –ù–∞—à–∏ –º–æ–¥–µ—Ä–∞—Ç–æ—Ä—ã –ø—Ä–æ–≤–µ—Ä—è—Ç –µ–≥–æ –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è."
                )
        else:
            await message.answer(
                "‚ùå <b>–ü–ª–∞—Ç–µ–∂ –Ω–µ –Ω–∞–π–¥–µ–Ω</b>\n\n"
                "–°–Ω–∞—á–∞–ª–∞ –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É '–û–ø–ª–∞—Ç–∏—Ç—å –¥–æ—Å—Ç—É–ø' –≤ –º–µ–Ω—é."
            )
            
    except Exception as e:
        logger.error(f"Error processing screenshot: {e}")
        await message.answer(
            "‚ùå <b>–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Å–∫—Ä–∏–Ω—à–æ—Ç–∞</b>\n\n"
            "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–∫—Ä–∏–Ω—à–æ—Ç –µ—â–µ —Ä–∞–∑ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É."
        )


async def main():
    """Main function to start the bot"""
    logger.info("Starting VIP Access Bot with Supabase integration...")
    try:
        await dp.start_polling(bot)
    except Exception as e:
        logger.error(f"Error starting bot: {e}")
    finally:
        await bot.session.close()


if __name__ == "__main__":
    asyncio.run(main())
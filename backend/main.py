import asyncio
import logging
from datetime import datetime, timedelta
import os
import re
from typing import Optional, Dict, Any

from aiogram import Bot, Dispatcher, types
from aiogram.filters import Command
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton, CallbackQuery
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.fsm.storage.memory import MemoryStorage

from supabase_client import SupabaseClient

# Configure logging
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

# Initialize bot and dispatcher
BOT_TOKEN = os.getenv("BOT_TOKEN")
bot = Bot(token=BOT_TOKEN)
storage = MemoryStorage()
dp = Dispatcher(storage=storage)

# Initialize Supabase client
supabase_client = SupabaseClient()

# FSM States
class PaymentStates(StatesGroup):
    waiting_for_screenshot = State()

# Utility functions
def generate_access_link(payment_id: str, user_id: int) -> str:
    """Generate unique access link for VIP chat"""
    import secrets
    token = secrets.token_urlsafe(32)
    # In real implementation, save this token to database
    return f"https://t.me/+{token}"

def is_payment_expired(created_at: str, hours_limit: int = 24) -> bool:
    """Check if payment is expired"""
    try:
        created_time = datetime.fromisoformat(created_at.replace('Z', '+00:00'))
        expiry_time = created_time + timedelta(hours=hours_limit)
        return datetime.now() > expiry_time
    except Exception as e:
        logger.error(f"Error checking payment expiry: {e}")
        return True

def validate_screenshot_text(text: str) -> Dict[str, Any]:
    """Basic validation of screenshot text for payment confirmation"""
    validation_result = {
        "is_valid": False,
        "found_amount": False,
        "found_success": False,
        "found_date": False,
        "confidence": 0
    }
    
    if not text:
        return validation_result
    
    text_lower = text.lower()
    
    # Check for amount (500 rubles)
    amount_patterns = [r'500', r'–ø—è—Ç—å—Å–æ—Ç', r'five hundred']
    for pattern in amount_patterns:
        if re.search(pattern, text_lower):
            validation_result["found_amount"] = True
            break
    
    # Check for success status
    success_patterns = [r'—É—Å–ø–µ—à–Ω–æ', r'–≤—ã–ø–æ–ª–Ω–µ–Ω–æ', r'–∑–∞–≤–µ—Ä—à–µ–Ω–æ', r'success', r'completed', r'paid']
    for pattern in success_patterns:
        if re.search(pattern, text_lower):
            validation_result["found_success"] = True
            break
    
    # Check for recent date (simple check)
    date_patterns = [r'\d{1,2}[./]\d{1,2}[./]\d{2,4}', r'\d{1,2}:\d{2}']
    for pattern in date_patterns:
        if re.search(pattern, text):
            validation_result["found_date"] = True
            break
    
    # Calculate confidence
    confidence = 0
    if validation_result["found_amount"]:
        confidence += 40
    if validation_result["found_success"]:
        confidence += 40
    if validation_result["found_date"]:
        confidence += 20
    
    validation_result["confidence"] = confidence
    validation_result["is_valid"] = confidence >= 60
    
    return validation_result

async def process_screenshot_automatically(screenshot_url: str, payment_id: str) -> Dict[str, Any]:
    """Process screenshot automatically using OCR or AI"""
    try:
        # Here you would implement actual OCR/AI processing
        # For now, we'll simulate the process
        
        # Placeholder for OCR text extraction
        extracted_text = "–ü–ª–∞—Ç–µ–∂ –≤—ã–ø–æ–ª–Ω–µ–Ω —É—Å–ø–µ—à–Ω–æ 500 —Ä—É–±–ª–µ–π 15:30 25.12.2024"
        
        validation = validate_screenshot_text(extracted_text)
        
        result = {
            "success": validation["is_valid"],
            "confidence": validation["confidence"],
            "extracted_text": extracted_text,
            "validation_details": validation
        }
        
        # Update payment status based on validation
        if validation["is_valid"]:
            await supabase_client.update_payment_status(
                payment_id=payment_id,
                status="auto_verified",
                verification_details=result
            )
        else:
            await supabase_client.update_payment_status(
                payment_id=payment_id,
                status="needs_manual_review",
                verification_details=result
            )
        
        return result
        
    except Exception as e:
        logger.error(f"Error processing screenshot automatically: {e}")
        return {"success": False, "error": str(e)}

async def notify_moderators(payment_id: str, user_id: int, screenshot_url: str):
    """Notify moderators about new payment for manual review"""
    try:
        # Get moderator chat IDs from environment or database
        moderator_chat_ids = os.getenv("MODERATOR_CHAT_IDS", "").split(",")
        
        if not moderator_chat_ids or moderator_chat_ids == [""]:
            logger.warning("No moderator chat IDs configured")
            return
        
        message_text = (
            f"üîî <b>–ù–æ–≤—ã–π –ø–ª–∞—Ç–µ–∂ –Ω–∞ –ø—Ä–æ–≤–µ—Ä–∫—É</b>\n\n"
            f"üÜî <b>Payment ID:</b> <code>{payment_id}</code>\n"
            f"üë§ <b>User ID:</b> <code>{user_id}</code>\n\n"
            f"üì∏ <b>–°–∫—Ä–∏–Ω—à–æ—Ç:</b> {screenshot_url}\n\n"
            f"‚è∞ <b>–í—Ä–µ–º—è:</b> {datetime.now().strftime('%d.%m.%Y %H:%M')}"
        )
        
        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [
                InlineKeyboardButton(text="‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å", callback_data=f"mod_approve:{payment_id}"),
                InlineKeyboardButton(text="‚ùå –û—Ç–∫–ª–æ–Ω–∏—Ç—å", callback_data=f"mod_reject:{payment_id}")
            ],
            [InlineKeyboardButton(text="üìù –î–µ—Ç–∞–ª–∏", callback_data=f"mod_details:{payment_id}")]
        ])
        
        for chat_id in moderator_chat_ids:
            if chat_id.strip():
                try:
                    await bot.send_message(
                        chat_id=int(chat_id.strip()),
                        text=message_text,
                        reply_markup=keyboard
                    )
                except Exception as e:
                    logger.error(f"Failed to notify moderator {chat_id}: {e}")
                    
    except Exception as e:
        logger.error(f"Error notifying moderators: {e}")

# Bot handlers
@dp.message(Command("start"))
async def start_handler(message: types.Message):
    """Handle /start command"""
    user = message.from_user
    
    # Log user action
    await supabase_client.log_user_action(
        telegram_id=user.id,
        action="bot_start",
        details={"username": user.username, "first_name": user.first_name}
    )
    
    welcome_text = (
        f"üëã –ü—Ä–∏–≤–µ—Ç, {user.first_name}!\n\n"
        "üéØ –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ VIP –±–æ—Ç!\n\n"
        "üíé –ü–æ–ª—É—á–∏—Ç–µ –¥–æ—Å—Ç—É–ø –∫ —ç–∫—Å–∫–ª—é–∑–∏–≤–Ω–æ–º—É –∫–æ–Ω—Ç–µ–Ω—Ç—É –≤—Å–µ–≥–æ –∑–∞ 500 —Ä—É–±–ª–µ–π.\n\n"
        "üî• –ß—Ç–æ –≤–∞—Å –∂–¥–µ—Ç:\n"
        "‚Ä¢ –ó–∞–∫—Ä—ã—Ç—ã–π VIP —á–∞—Ç\n"
        "‚Ä¢ –≠–∫—Å–∫–ª—é–∑–∏–≤–Ω—ã–µ –º–∞—Ç–µ—Ä–∏–∞–ª—ã\n"
        "‚Ä¢ –ü—Ä—è–º–æ–µ –æ–±—â–µ–Ω–∏–µ —Å —ç–∫—Å–ø–µ—Ä—Ç–∞–º–∏\n"
        "‚Ä¢ –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç–Ω–∞—è –ø–æ–¥–¥–µ—Ä–∂–∫–∞\n\n"
        "üí≥ –ì–æ—Ç–æ–≤—ã –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç—å—Å—è?"
    )
    
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üí≥ –û–ø–ª–∞—Ç–∏—Ç—å –¥–æ—Å—Ç—É–ø (500‚ÇΩ)", callback_data="pay")],
        [InlineKeyboardButton(text="‚ÑπÔ∏è –ü–æ–¥—Ä–æ–±–Ω–µ–µ", callback_data="info")]
    ])
    
    await message.answer(welcome_text, reply_markup=keyboard)

@dp.callback_query(lambda c: c.data == "pay")
async def handle_payment(callback_query: CallbackQuery):
    """Handle payment initiation"""
    user = callback_query.from_user
    
    try:
        # Create payment record
        payment_data = await supabase_client.create_payment(
            telegram_id=user.id,
            amount=500,
            currency="RUB"
        )
        
        payment_id = payment_data.get("payment_id")
        
        payment_text = (
            "üí≥ <b>–û–ø–ª–∞—Ç–∞ VIP –¥–æ—Å—Ç—É–ø–∞</b>\n\n"
            "üí∞ <b>–°—É–º–º–∞:</b> 500 —Ä—É–±–ª–µ–π\n"
            f"üÜî <b>ID –ø–ª–∞—Ç–µ–∂–∞:</b> <code>{payment_id}</code>\n\n"
            "üì± <b>–°–ø–æ—Å–æ–±—ã –æ–ø–ª–∞—Ç—ã:</b>\n"
            "‚Ä¢ –°–±–µ—Ä–ë–∞–Ω–∫: <code>+7 (XXX) XXX-XX-XX</code>\n"
            "‚Ä¢ –¢–∏–Ω—å–∫–æ—Ñ—Ñ: <code>+7 (XXX) XXX-XX-XX</code>\n"
            "‚Ä¢ –ÆMoney: <code>XXXXXXXXXXXXXX</code>\n\n"
            "üì∏ <b>–ü–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã:</b>\n"
            "1. –°–¥–µ–ª–∞–π—Ç–µ —Å–∫—Ä–∏–Ω—à–æ—Ç –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è\n"
            "2. –ù–∞–∂–º–∏—Ç–µ '–Ø –æ–ø–ª–∞—Ç–∏–ª'\n"
            "3. –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–∫—Ä–∏–Ω—à–æ—Ç –≤ —á–∞—Ç\n\n"
            "‚è∞ <b>–í—Ä–µ–º—è –Ω–∞ –æ–ø–ª–∞—Ç—É:</b> 24 —á–∞—Å–∞"
        )
        
        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="‚úÖ –Ø –æ–ø–ª–∞—Ç–∏–ª", callback_data=f"payment_done:{payment_id}")],
            [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="back_to_start")]
        ])
        
        await callback_query.message.edit_text(payment_text, reply_markup=keyboard)
        
    except Exception as e:
        logger.error(f"Error creating payment: {e}")
        await callback_query.message.edit_text(
            "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø–ª–∞—Ç–µ–∂–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
            reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="back_to_start")]
            ])
        )

@dp.callback_query(lambda c: c.data.startswith("payment_done:"))
async def handle_payment_verification(callback_query: CallbackQuery):
    """Handle payment verification"""
    user = callback_query.from_user
    payment_id = callback_query.data.split(":")[1]
    
    try:
        if payment_id:
            # Check payment status first
            payment_status = await supabase_client.get_payment_status(payment_id)
            
            if not payment_status:
                await callback_query.message.edit_text(
                    "‚ùå <b>–ü–ª–∞—Ç–µ–∂ –Ω–µ –Ω–∞–π–¥–µ–Ω</b>\n\n"
                    "–í–æ–∑–º–æ–∂–Ω–æ, –ø–ª–∞—Ç–µ–∂ –±—ã–ª —É–¥–∞–ª–µ–Ω –∏–ª–∏ ID –Ω–µ–≤–µ—Ä–Ω—ã–π.",
                    reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                        [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="back_to_start")]
                    ])
                )
                return
            
            current_status = payment_status.get('status')
            
            # Check if payment is expired
            if is_payment_expired(payment_status.get('created_at', '')):
                await supabase_client.update_payment_status(payment_id, 'expired')
                current_status = 'expired'
            
            # Handle different payment statuses
            if current_status == 'verified' or current_status == 'auto_verified':
                # Payment already verified
                access_link = payment_status.get('access_link')
                if not access_link:
                    # Generate new access link
                    access_link = generate_access_link(payment_id, user.id)
                    expires_at = (datetime.now() + timedelta(days=30)).isoformat()
                    
                    await supabase_client.update_payment_status(
                        payment_id=payment_id,
                        status='verified',
                        access_link=access_link,
                        expires_at=expires_at
                    )
                else:
                    expires_at = payment_status.get('expires_at')
                
                success_text = (
                    "‚úÖ <b>–û–ø–ª–∞—Ç–∞ —É–∂–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞!</b>\n\n"
                    "üéâ –£ –≤–∞—Å –µ—Å—Ç—å VIP –¥–æ—Å—Ç—É–ø.\n\n"
                    f"üîó <b>–í–∞—à–∞ —Å—Å—ã–ª–∫–∞ –¥–ª—è –≤—Ö–æ–¥–∞:</b>\n{access_link}\n\n"
                    f"üìÖ <b>–î–µ–π—Å—Ç–≤—É–µ—Ç –¥–æ:</b> {expires_at}\n\n"
                    "üíé –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ VIP –∫–ª—É–±!"
                )
                
                keyboard = InlineKeyboardMarkup(inline_keyboard=[
                    [InlineKeyboardButton(text="üéØ –í–æ–π—Ç–∏ –≤ VIP —á–∞—Ç", url=access_link)],
                    [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="back_to_start")]
                ])
                
                await callback_query.message.edit_text(success_text, reply_markup=keyboard)
                return
            
            elif current_status == 'rejected':
                # Payment was rejected
                rejection_reason = payment_status.get('rejection_reason', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –ø—Ä–∏—á–∏–Ω–∞')
                
                await callback_query.message.edit_text(
                    f"‚ùå <b>–ü–ª–∞—Ç–µ–∂ –æ—Ç–∫–ª–æ–Ω–µ–Ω</b>\n\n"
                    f"üìù <b>–ü—Ä–∏—á–∏–Ω–∞:</b> {rejection_reason}\n\n"
                    "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –æ–ø–ª–∞—Ç–∏—Ç—å —Å–Ω–æ–≤–∞ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É.",
                    reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                        [InlineKeyboardButton(text="üí≥ –ù–æ–≤—ã–π –ø–ª–∞—Ç–µ–∂", callback_data="pay")],
                        [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="back_to_start")]
                    ])
                )
                return
            
            elif current_status == 'pending':
                # Check if screenshot was uploaded
                if payment_status.get('screenshot_url'):
                    await callback_query.message.edit_text(
                        "‚è≥ <b>–ü–ª–∞—Ç–µ–∂ –Ω–∞ –ø—Ä–æ–≤–µ—Ä–∫–µ</b>\n\n"
                        "üì∏ –°–∫—Ä–∏–Ω—à–æ—Ç –ø–æ–ª—É—á–µ–Ω –∏ –ø–µ—Ä–µ–¥–∞–Ω –Ω–∞ –ø—Ä–æ–≤–µ—Ä–∫—É –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–∞–º.\n\n"
                        "‚è∞ –û–±—ã—á–Ω–æ –ø—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–Ω–∏–º–∞–µ—Ç –¥–æ 30 –º–∏–Ω—É—Ç.\n\n"
                        "–ú—ã —É–≤–µ–¥–æ–º–∏–º –≤–∞—Å –æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–µ.",
                        reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                            [InlineKeyboardButton(text="üîÑ –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å–Ω–æ–≤–∞", callback_data=f"payment_done:{payment_id}")],
                            [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="back_to_start")]
                        ])
                    )
                else:
                    # Request screenshot
                    await callback_query.message.edit_text(
                        "üì∏ <b>–ù—É–∂–µ–Ω —Å–∫—Ä–∏–Ω—à–æ—Ç –æ–ø–ª–∞—Ç—ã</b>\n\n"
                        "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–∫—Ä–∏–Ω—à–æ—Ç –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –æ–ø–ª–∞—Ç—ã –≤ —ç—Ç–æ—Ç —á–∞—Ç.\n\n"
                        "üí° –°–∫—Ä–∏–Ω—à–æ—Ç –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å:\n"
                        "‚Ä¢ –°—É–º–º—É –ø–ª–∞—Ç–µ–∂–∞ (500 —Ä—É–±–ª–µ–π)\n"
                        "‚Ä¢ –î–∞—Ç—É –∏ –≤—Ä–µ–º—è\n"
                        "‚Ä¢ –°—Ç–∞—Ç—É—Å '–£—Å–ø–µ—à–Ω–æ' –∏–ª–∏ '–í—ã–ø–æ–ª–Ω–µ–Ω–æ'",
                        reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                            [InlineKeyboardButton(text="üîÑ –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å–Ω–æ–≤–∞", callback_data=f"payment_done:{payment_id}")],
                            [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="pay")]
                        ])
                    )
                    
                    # Set state to wait for screenshot
                    from aiogram.fsm.context import FSMContext
                    state = FSMContext(storage=storage, key=types.StorageKey(bot_id=bot.id, chat_id=callback_query.message.chat.id, user_id=user.id))
                    await state.set_state(PaymentStates.waiting_for_screenshot)
                    await state.update_data(payment_id=payment_id)
                return
            
            elif current_status == 'expired':
                await callback_query.message.edit_text(
                    "‚è∞ <b>–ü–ª–∞—Ç–µ–∂ –∏—Å—Ç–µ–∫</b>\n\n"
                    "–í—Ä–µ–º—è –Ω–∞ –æ–ø–ª–∞—Ç—É –∏—Å—Ç–µ–∫–ª–æ. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–æ–∑–¥–∞–π—Ç–µ –Ω–æ–≤—ã–π –ø–ª–∞—Ç–µ–∂.",
                    reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                        [InlineKeyboardButton(text="üí≥ –ù–æ–≤—ã–π –ø–ª–∞—Ç–µ–∂", callback_data="pay")],
                        [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="back_to_start")]
                    ])
                )
                return
            
            else:
                # Unknown status
                await callback_query.message.edit_text(
                    f"‚ùì <b>–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Å—Ç–∞—Ç—É—Å –ø–ª–∞—Ç–µ–∂–∞:</b> {current_status}\n\n"
                    "–û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É –¥–ª—è —Ä–µ—à–µ–Ω–∏—è –ø—Ä–æ–±–ª–µ–º—ã.",
                    reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                        [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="back_to_start")]
                    ])
                )
                
    except Exception as e:
        logger.error(f"Error verifying payment: {e}")
        await callback_query.message.edit_text(
            "‚ùå <b>–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –ø–ª–∞—Ç–µ–∂–∞</b>\n\n"
            "–ü—Ä–æ–∏–∑–æ—à–ª–∞ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É.\n\n"
            f"üÜî <b>ID –ø–ª–∞—Ç–µ–∂–∞:</b> <code>{payment_id}</code>",
            reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="üîÑ –ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å —Å–Ω–æ–≤–∞", callback_data=f"payment_done:{payment_id}")],
                [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="back_to_start")]
            ])
        )

@dp.message(PaymentStates.waiting_for_screenshot)
async def handle_screenshot_upload(message: types.Message, state: FSMContext):
    """Handle screenshot upload from user"""
    try:
        data = await state.get_data()
        payment_id = data.get('payment_id')
        
        if not payment_id:
            await message.answer("‚ùå –û—à–∏–±–∫–∞: ID –ø–ª–∞—Ç–µ–∂–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω. –ù–∞—á–Ω–∏—Ç–µ –ø—Ä–æ—Ü–µ—Å—Å –∑–∞–Ω–æ–≤–æ.")
            await state.clear()
            return
        
        if message.photo:
            # Get the largest photo
            photo = message.photo[-1]
            
            # Download photo
            file_info = await bot.get_file(photo.file_id)
            file_url = f"https://api.telegram.org/file/bot{BOT_TOKEN}/{file_info.file_path}"
            
            # Save screenshot URL to database
            await supabase_client.update_payment_screenshot(payment_id, file_url)
            
            # Try automatic processing first
            auto_result = await process_screenshot_automatically(file_url, payment_id)
            
            if auto_result.get("success") and auto_result.get("confidence", 0) >= 80:
                # High confidence - auto approve
                access_link = generate_access_link(payment_id, message.from_user.id)
                expires_at = (datetime.now() + timedelta(days=30)).isoformat()
                
                await supabase_client.update_payment_status(
                    payment_id=payment_id,
                    status='verified',
                    access_link=access_link,
                    expires_at=expires_at
                )
                
                success_text = (
                    "‚úÖ <b>–û–ø–ª–∞—Ç–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞!</b>\n\n"
                    "üéâ –ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º! –í—ã –ø–æ–ª—É—á–∏–ª–∏ VIP –¥–æ—Å—Ç—É–ø.\n\n"
                    f"üîó <b>–í–∞—à–∞ —Å—Å—ã–ª–∫–∞ –¥–ª—è –≤—Ö–æ–¥–∞:</b>\n{access_link}\n\n"
                    f"üìÖ <b>–î–µ–π—Å—Ç–≤—É–µ—Ç –¥–æ:</b> {expires_at}\n\n"
                    "üíé –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ VIP –∫–ª—É–±!"
                )
                
                keyboard = InlineKeyboardMarkup(inline_keyboard=[
                    [InlineKeyboardButton(text="üéØ –í–æ–π—Ç–∏ –≤ VIP —á–∞—Ç", url=access_link)],
                    [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="back_to_start")]
                ])
                
                await message.answer(success_text, reply_markup=keyboard)
                
                # Log successful verification
                await supabase_client.log_user_action(
                    telegram_id=message.from_user.id,
                    action="payment_auto_verified",
                    details={"payment_id": payment_id, "confidence": auto_result.get("confidence")}
                )
                
            else:
                # Low confidence or failed - send to manual review
                await supabase_client.update_payment_status(payment_id, 'needs_manual_review')
                
                await message.answer(
                    "üì∏ <b>–°–∫—Ä–∏–Ω—à–æ—Ç –ø–æ–ª—É—á–µ–Ω!</b>\n\n"
                    "‚è≥ –í–∞—à –ø–ª–∞—Ç–µ–∂ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –Ω–∞ –ø—Ä–æ–≤–µ—Ä–∫—É –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–∞–º.\n\n"
                    "‚è∞ –û–±—ã—á–Ω–æ –ø—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–Ω–∏–º–∞–µ—Ç –¥–æ 30 –º–∏–Ω—É—Ç.\n\n"
                    "–ú—ã —É–≤–µ–¥–æ–º–∏–º –≤–∞—Å –æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–µ.",
                    reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                        [InlineKeyboardButton(text="üîÑ –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å—Ç–∞—Ç—É—Å", callback_data=f"payment_done:{payment_id}")],
                        [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="back_to_start")]
                    ])
                )
                
                # Notify moderators
                await notify_moderators(payment_id, message.from_user.id, file_url)
            
            await state.clear()
            
        else:
            await message.answer(
                "‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ (—Å–∫—Ä–∏–Ω—à–æ—Ç) –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –æ–ø–ª–∞—Ç—ã.",
                reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                    [InlineKeyboardButton(text="üîô –û—Ç–º–µ–Ω–∞", callback_data="back_to_start")]
                ])
            )
            
    except Exception as e:
        logger.error(f"Error handling screenshot upload: {e}")
        await message.answer(
            "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Å–∫—Ä–∏–Ω—à–æ—Ç–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.",
            reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="back_to_start")]
            ])
        )
        await state.clear()

# Moderator handlers
@dp.callback_query(lambda c: c.data.startswith("mod_approve:"))
async def handle_moderator_approve(callback_query: CallbackQuery):
    """Handle moderator approval"""
    payment_id = callback_query.data.split(":")[1]
    
    try:
        # Get payment info
        payment_info = await supabase_client.get_payment_status(payment_id)
        if not payment_info:
            await callback_query.answer("‚ùå –ü–ª–∞—Ç–µ–∂ –Ω–µ –Ω–∞–π–¥–µ–Ω")
            return
        
        user_id = payment_info.get('telegram_id')
        
        # Generate access link
        access_link = generate_access_link(payment_id, user_id)
        expires_at = (datetime.now() + timedelta(days=30)).isoformat()
        
        # Update payment status
        await supabase_client.update_payment_status(
            payment_id=payment_id,
            status='verified',
            access_link=access_link,
            expires_at=expires_at
        )
        
        # Notify user
        success_text = (
            "‚úÖ <b>–û–ø–ª–∞—Ç–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞!</b>\n\n"
            "üéâ –ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º! –í—ã –ø–æ–ª—É—á–∏–ª–∏ VIP –¥–æ—Å—Ç—É–ø.\n\n"
            f"üîó <b>–í–∞—à–∞ —Å—Å—ã–ª–∫–∞ –¥–ª—è –≤—Ö–æ–¥–∞:</b>\n{access_link}\n\n"
            f"üìÖ <b>–î–µ–π—Å—Ç–≤—É–µ—Ç –¥–æ:</b> {expires_at}\n\n"
            "üíé –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ VIP –∫–ª—É–±!"
        )
        
        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="üéØ –í–æ–π—Ç–∏ –≤ VIP —á–∞—Ç", url=access_link)]
        ])
        
        await bot.send_message(user_id, success_text, reply_markup=keyboard)
        
        # Update moderator message
        await callback_query.message.edit_text(
            f"‚úÖ <b>–ü–ª–∞—Ç–µ–∂ {payment_id} –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω</b>\n\n"
            f"üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –ø–æ–ª—É—á–∏–ª –¥–æ—Å—Ç—É–ø.\n"
            f"‚è∞ {datetime.now().strftime('%d.%m.%Y %H:%M')}"
        )
        
        await callback_query.answer("‚úÖ –ü–ª–∞—Ç–µ–∂ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω")
        
    except Exception as e:
        logger.error(f"Error approving payment: {e}")
        await callback_query.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–∏")

@dp.callback_query(lambda c: c.data.startswith("mod_reject:"))
async def handle_moderator_reject(callback_query: CallbackQuery):
    """Handle moderator rejection"""
    payment_id = callback_query.data.split(":")[1]
    
    try:
        # Get payment info
        payment_info = await supabase_client.get_payment_status(payment_id)
        if not payment_info:
            await callback_query.answer("‚ùå –ü–ª–∞—Ç–µ–∂ –Ω–µ –Ω–∞–π–¥–µ–Ω")
            return
        
        user_id = payment_info.get('telegram_id')
        
        # Update payment status
        await supabase_client.update_payment_status(
            payment_id=payment_id,
            status='rejected',
            rejection_reason='–°–∫—Ä–∏–Ω—à–æ—Ç –Ω–µ –ø—Ä–æ—à–µ–ª –ø—Ä–æ–≤–µ—Ä–∫—É'
        )
        
        # Notify user
        await bot.send_message(
            user_id,
            "‚ùå <b>–ü–ª–∞—Ç–µ–∂ –æ—Ç–∫–ª–æ–Ω–µ–Ω</b>\n\n"
            "üìù <b>–ü—Ä–∏—á–∏–Ω–∞:</b> –°–∫—Ä–∏–Ω—à–æ—Ç –Ω–µ –ø—Ä–æ—à–µ–ª –ø—Ä–æ–≤–µ—Ä–∫—É\n\n"
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –æ–ø–ª–∞—Ç–∏—Ç—å —Å–Ω–æ–≤–∞ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É.",
            reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="üí≥ –ù–æ–≤—ã–π –ø–ª–∞—Ç–µ–∂", callback_data="pay")]
            ])
        )
        
        # Update moderator message
        await callback_query.message.edit_text(
            f"‚ùå <b>–ü–ª–∞—Ç–µ–∂ {payment_id} –æ—Ç–∫–ª–æ–Ω–µ–Ω</b>\n\n"
            f"üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} —É–≤–µ–¥–æ–º–ª–µ–Ω.\n"
            f"‚è∞ {datetime.now().strftime('%d.%m.%Y %H:%M')}"
        )
        
        await callback_query.answer("‚ùå –ü–ª–∞—Ç–µ–∂ –æ—Ç–∫–ª–æ–Ω–µ–Ω")
        
    except Exception as e:
        logger.error(f"Error rejecting payment: {e}")
        await callback_query.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–∏")

@dp.callback_query(lambda c: c.data == "back_to_start")
async def handle_back_to_start(callback_query: CallbackQuery):
    """Handle back to start"""
    user = callback_query.from_user
    
    welcome_text = (
        f"üëã –ü—Ä–∏–≤–µ—Ç, {user.first_name}!\n\n"
        "üéØ –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ VIP –±–æ—Ç!\n\n"
        "üíé –ü–æ–ª—É—á–∏—Ç–µ –¥–æ—Å—Ç—É–ø –∫ —ç–∫—Å–∫–ª—é–∑–∏–≤–Ω–æ–º—É –∫–æ–Ω—Ç–µ–Ω—Ç—É –≤—Å–µ–≥–æ –∑–∞ 500 —Ä—É–±–ª–µ–π.\n\n"
        "üî• –ß—Ç–æ –≤–∞—Å –∂–¥–µ—Ç:\n"
        "‚Ä¢ –ó–∞–∫—Ä—ã—Ç—ã–π VIP —á–∞—Ç\n"
        "‚Ä¢ –≠–∫—Å–∫–ª—é–∑–∏–≤–Ω—ã–µ –º–∞—Ç–µ—Ä–∏–∞–ª—ã\n"
        "‚Ä¢ –ü—Ä—è–º–æ–µ –æ–±—â–µ–Ω–∏–µ —Å —ç–∫—Å–ø–µ—Ä—Ç–∞–º–∏\n"
        "‚Ä¢ –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç–Ω–∞—è –ø–æ–¥–¥–µ—Ä–∂–∫–∞\n\n"
        "üí≥ –ì–æ—Ç–æ–≤—ã –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç—å—Å—è?"
    )
    
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üí≥ –û–ø–ª–∞—Ç–∏—Ç—å –¥–æ—Å—Ç—É–ø (500‚ÇΩ)", callback_data="pay")],
        [InlineKeyboardButton(text="‚ÑπÔ∏è –ü–æ–¥—Ä–æ–±–Ω–µ–µ", callback_data="info")]
    ])
    
    await callback_query.message.edit_text(welcome_text, reply_markup=keyboard)

@dp.callback_query(lambda c: c.data == "info")
async def handle_info(callback_query: CallbackQuery):
    """Handle info request"""
    info_text = (
        "‚ÑπÔ∏è <b>–ü–æ–¥—Ä–æ–±–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è</b>\n\n"
        "üíé <b>VIP –¥–æ—Å—Ç—É–ø –≤–∫–ª—é—á–∞–µ—Ç:</b>\n"
        "‚Ä¢ –ó–∞–∫—Ä—ã—Ç—ã–π Telegram —á–∞—Ç —Å —ç–∫—Å–ø–µ—Ä—Ç–∞–º–∏\n"
        "‚Ä¢ –≠–∫—Å–∫–ª—é–∑–∏–≤–Ω—ã–µ –º–∞—Ç–µ—Ä–∏–∞–ª—ã –∏ –≥–∞–π–¥—ã\n"
        "‚Ä¢ –ï–∂–µ–¥–Ω–µ–≤–Ω—ã–µ –∞–Ω–∞–ª–∏—Ç–∏—á–µ—Å–∫–∏–µ –æ–±–∑–æ—Ä—ã\n"
        "‚Ä¢ –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç–Ω–∞—è —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∞—è –ø–æ–¥–¥–µ—Ä–∂–∫–∞\n"
        "‚Ä¢ –î–æ—Å—Ç—É–ø –∫ –∞—Ä—Ö–∏–≤—É –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤\n\n"
        "üí∞ <b>–°—Ç–æ–∏–º–æ—Å—Ç—å:</b> 500 —Ä—É–±–ª–µ–π\n"
        "‚è∞ <b>–°—Ä–æ–∫ –¥–µ–π—Å—Ç–≤–∏—è:</b> 30 –¥–Ω–µ–π\n"
        "üîÑ <b>–ü—Ä–æ–¥–ª–µ–Ω–∏–µ:</b> –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ\n\n"
        "üìû <b>–ü–æ–¥–¥–µ—Ä–∂–∫–∞:</b> @support_username"
    )
    
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üí≥ –û–ø–ª–∞—Ç–∏—Ç—å –¥–æ—Å—Ç—É–ø", callback_data="pay")],
        [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="back_to_start")]
    ])
    
    await callback_query.message.edit_text(info_text, reply_markup=keyboard)

async def main():
    """Main function to start the bot"""
    try:
        logger.info("Starting bot...")
        await dp.start_polling(bot)
    except Exception as e:
        logger.error(f"Error starting bot: {e}")
    finally:
        await bot.session.close()

if __name__ == "__main__":
    asyncio.run(main())
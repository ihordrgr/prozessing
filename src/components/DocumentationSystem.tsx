import React, { useState, useEffect } from 'react'
import { Book, Download, ExternalLink, Search, FileText, Video, Code, Eye, Globe } from 'lucide-react'
import ReactMarkdown from 'react-markdown'
import remarkGfm from 'remark-gfm'
import { Helmet } from 'react-helmet-async'
import html2pdf from 'html2pdf.js'

interface DocumentationProps {
  telegramId?: number
}

interface SearchHistoryItem {
  term: string
  timestamp: number
}

const translations = {
  ru: {
    documentation: '–î–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è',
    downloadPDF: '–°–∫–∞—á–∞—Ç—å PDF',
    search: '–ü–æ–∏—Å–∫ –≤ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏...',
    searchResults: '–†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ–∏—Å–∫–∞ –¥–ª—è',
    nothingFound: '–ù–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ',
    readMore: '–ß–∏—Ç–∞—Ç—å –ø–æ–ª–Ω–æ—Å—Ç—å—é ‚Üí',
    usefulLinks: '–ü–æ–ª–µ–∑–Ω—ã–µ —Å—Å—ã–ª–∫–∏',
    telegramSupport: '–ü–æ–¥–¥–µ—Ä–∂–∫–∞ –≤ Telegram',
    emailSupport: 'Email –ø–æ–¥–¥–µ—Ä–∂–∫–∞',
    systemStatus: '–°—Ç–∞—Ç—É—Å —Å–∏—Å—Ç–µ–º—ã',
    searchHistory: '–ò—Å—Ç–æ—Ä–∏—è –ø–æ–∏—Å–∫–∞',
    clearHistory: '–û—á–∏—Å—Ç–∏—Ç—å',
    gettingStarted: '–ù–∞—á–∞–ª–æ —Ä–∞–±–æ—Ç—ã',
    payment: '–û–ø–ª–∞—Ç–∞ –∏ –¥–æ—Å—Ç—É–ø',
    api: 'API –∏ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏',
    troubleshooting: '–†–µ—à–µ–Ω–∏–µ –ø—Ä–æ–±–ª–µ–º'
  },
  en: {
    documentation: 'Documentation',
    downloadPDF: 'Download PDF',
    search: 'Search documentation...',
    searchResults: 'Search results for',
    nothingFound: 'Nothing found',
    readMore: 'Read more ‚Üí',
    usefulLinks: 'Useful links',
    telegramSupport: 'Telegram Support',
    emailSupport: 'Email Support',
    systemStatus: 'System Status',
    searchHistory: 'Search History',
    clearHistory: 'Clear',
    gettingStarted: 'Getting Started',
    payment: 'Payment & Access',
    api: 'API & Integrations',
    troubleshooting: 'Troubleshooting'
  }
}

export const DocumentationSystem: React.FC<DocumentationProps> = ({ telegramId }) => {
  const [activeSection, setActiveSection] = useState<'getting-started' | 'payment' | 'api' | 'troubleshooting'>('getting-started')
  const [searchTerm, setSearchTerm] = useState('')
  const [searchHistory, setSearchHistory] = useState<SearchHistoryItem[]>([])
  const [language, setLanguage] = useState<'ru' | 'en'>('ru')
  const [isLoading, setIsLoading] = useState(false)
  const [hoveredSection, setHoveredSection] = useState<string | null>(null)

  const t = translations[language]

  // Load search history from localStorage
  useEffect(() => {
    const savedHistory = localStorage.getItem('documentation-search-history')
    if (savedHistory) {
      setSearchHistory(JSON.parse(savedHistory))
    }
  }, [])

  // Save search to history
  const saveSearchToHistory = (term: string) => {
    if (term.trim().length < 2) return
    
    const newHistory = [
      { term: term.trim(), timestamp: Date.now() },
      ...searchHistory.filter(item => item.term !== term.trim())
    ].slice(0, 5) // Keep only last 5 searches
    
    setSearchHistory(newHistory)
    localStorage.setItem('documentation-search-history', JSON.stringify(newHistory))
  }

  // Clear search history
  const clearSearchHistory = () => {
    setSearchHistory([])
    localStorage.removeItem('documentation-search-history')
  }

  const documentationSections = {
    'getting-started': {
      title: language === 'ru' ? '–ù–∞—á–∞–ª–æ —Ä–∞–±–æ—Ç—ã' : 'Getting Started',
      icon: <Book className="w-5 h-5" />,
      preview: language === 'ru' ? '–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è, –ø–µ—Ä–≤—ã–µ —à–∞–≥–∏, –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å' : 'Registration, first steps, interface',
      content: [
        {
          title: language === 'ru' ? '–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –∏ –ø–µ—Ä–≤—ã–µ —à–∞–≥–∏' : 'Registration and First Steps',
          content: language === 'ru' ? `
# –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ VIP –ö–ª—É–±!

## –ö–∞–∫ –Ω–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É

1. **–ó–∞–ø—É—Å—Ç–∏—Ç–µ –±–æ—Ç–∞** - –ù–∞–∂–º–∏—Ç–µ /start –≤ Telegram –±–æ—Ç–µ
2. **–ò–∑—É—á–∏—Ç–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏** - –û–∑–Ω–∞–∫–æ–º—å—Ç–µ—Å—å —Å –¥–æ—Å—Ç—É–ø–Ω—ã–º–∏ —Ñ—É–Ω–∫—Ü–∏—è–º–∏
3. **–ü—Ä–æ–∏–∑–≤–µ–¥–∏—Ç–µ –æ–ø–ª–∞—Ç—É** - –î–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è VIP –¥–æ—Å—Ç—É–ø–∞
4. **–ü–æ–ª—É—á–∏—Ç–µ –¥–æ—Å—Ç—É–ø** - –ü–æ—Å–ª–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –æ–ø–ª–∞—Ç—ã

## –ß—Ç–æ –≤–∫–ª—é—á–∞–µ—Ç VIP –¥–æ—Å—Ç—É–ø

- üîí –î–æ—Å—Ç—É–ø –∫ –∑–∞–∫—Ä—ã—Ç—ã–º –º–∞—Ç–µ—Ä–∏–∞–ª–∞–º
- üí¨ –£—á–∞—Å—Ç–∏–µ –≤ –ø—Ä–∏–≤–∞—Ç–Ω—ã—Ö —á–∞—Ç–∞—Ö
- ‚ö° –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç–Ω–∞—è –ø–æ–¥–¥–µ—Ä–∂–∫–∞
- üìä –†–∞—Å—à–∏—Ä–µ–Ω–Ω–∞—è –∞–Ω–∞–ª–∏—Ç–∏–∫–∞
- üéØ –≠–∫—Å–∫–ª—é–∑–∏–≤–Ω—ã–π –∫–æ–Ω—Ç–µ–Ω—Ç

## –°—Ä–æ–∫ –¥–µ–π—Å—Ç–≤–∏—è

VIP –¥–æ—Å—Ç—É–ø –¥–µ–π—Å—Ç–≤—É–µ—Ç **30 –¥–Ω–µ–π** —Å –º–æ–º–µ–Ω—Ç–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –æ–ø–ª–∞—Ç—ã.
          ` : `
# Welcome to VIP Club!

## How to get started

1. **Launch the bot** - Click /start in Telegram bot
2. **Explore features** - Get familiar with available functions
3. **Make payment** - To get VIP access
4. **Get access** - After payment confirmation

## What VIP access includes

- üîí Access to private materials
- üí¨ Participation in private chats
- ‚ö° Priority support
- üìä Advanced analytics
- üéØ Exclusive content

## Validity period

VIP access is valid for **30 days** from payment confirmation.
          `
        },
        {
          title: language === 'ru' ? '–ò–Ω—Ç–µ—Ä—Ñ–µ–π—Å –∏ –Ω–∞–≤–∏–≥–∞—Ü–∏—è' : 'Interface and Navigation',
          content: language === 'ru' ? `
# –ò–Ω—Ç–µ—Ä—Ñ–µ–π—Å —Å–∏—Å—Ç–µ–º—ã

## –û—Å–Ω–æ–≤–Ω—ã–µ —Ä–∞–∑–¥–µ–ª—ã

### üè† –ì–ª–∞–≤–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞
- –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ VIP –¥–æ—Å—Ç—É–ø–µ
- –ö–Ω–æ–ø–∫–∞ –æ–ø–ª–∞—Ç—ã
- –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏

### ‚öôÔ∏è –õ–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç
- –°—Ç–∞—Ç—É—Å VIP –¥–æ—Å—Ç—É–ø–∞
- –ò—Å—Ç–æ—Ä–∏—è –ø–ª–∞—Ç–µ–∂–µ–π
- –°—Å—ã–ª–∫–∏ –¥–æ—Å—Ç—É–ø–∞

### üõ°Ô∏è –ë–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å
- –ñ—É—Ä–Ω–∞–ª –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
- –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
- –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ —Å–µ—Å—Å–∏–π

### üìû –ü–æ–¥–¥–µ—Ä–∂–∫–∞
- –°–æ–∑–¥–∞–Ω–∏–µ –æ–±—Ä–∞—â–µ–Ω–∏–π
- FAQ
- –ö–æ–Ω—Ç–∞–∫—Ç—ã

## –ù–∞–≤–∏–≥–∞—Ü–∏—è

–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –≤ –ø—Ä–∞–≤–æ–º –≤–µ—Ä—Ö–Ω–µ–º —É–≥–ª—É –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –¥–æ—Å—Ç—É–ø–∞ –∫ —Ä–∞–∑–¥–µ–ª–∞–º.
          ` : `
# System Interface

## Main sections

### üè† Home page
- VIP access information
- Payment button
- Instructions

### ‚öôÔ∏è Personal cabinet
- VIP access status
- Payment history
- Access links

### üõ°Ô∏è Security
- Activity log
- Security settings
- Session monitoring

### üìû Support
- Create tickets
- FAQ
- Contacts

## Navigation

Use buttons in the top right corner for quick access to sections.
          `
        }
      ]
    },
    'payment': {
      title: language === 'ru' ? '–û–ø–ª–∞—Ç–∞ –∏ –¥–æ—Å—Ç—É–ø' : 'Payment & Access',
      icon: <FileText className="w-5 h-5" />,
      preview: language === 'ru' ? '–°–ø–æ—Å–æ–±—ã –æ–ø–ª–∞—Ç—ã, —Ä–µ—à–µ–Ω–∏–µ –ø—Ä–æ–±–ª–µ–º' : 'Payment methods, troubleshooting',
      content: [
        {
          title: language === 'ru' ? '–ü—Ä–æ—Ü–µ—Å—Å –æ–ø–ª–∞—Ç—ã' : 'Payment Process',
          content: language === 'ru' ? `
# –ö–∞–∫ –ø—Ä–æ–∏–∑–≤–µ—Å—Ç–∏ –æ–ø–ª–∞—Ç—É

## –®–∞–≥ 1: –ò–Ω–∏—Ü–∏–∞—Ü–∏—è –ø–ª–∞—Ç–µ–∂–∞
1. –ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É "–û–ø–ª–∞—Ç–∏—Ç—å –¥–æ—Å—Ç—É–ø"
2. –í—ã–±–µ—Ä–∏—Ç–µ —É–¥–æ–±–Ω—ã–π —Å–ø–æ—Å–æ–± –æ–ø–ª–∞—Ç—ã
3. –°–ª–µ–¥—É–π—Ç–µ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è–º –ø–ª–∞—Ç–µ–∂–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã

## –®–∞–≥ 2: –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ
1. –°–¥–µ–ª–∞–π—Ç–µ —Å–∫—Ä–∏–Ω—à–æ—Ç —É—Å–ø–µ—à–Ω–æ–π –æ–ø–ª–∞—Ç—ã
2. –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–∫—Ä–∏–Ω—à–æ—Ç –≤ –±–æ—Ç
3. –î–æ–∂–¥–∏—Ç–µ—Å—å –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è (–¥–æ 5 –º–∏–Ω—É—Ç)

## –°–ø–æ—Å–æ–±—ã –æ–ø–ª–∞—Ç—ã

### üí≥ –ë–∞–Ω–∫–æ–≤—Å–∫–∏–µ –∫–∞—Ä—Ç—ã
- Visa, MasterCard, –ú–ò–†
- –ú–≥–Ω–æ–≤–µ–Ω–Ω–æ–µ –∑–∞—á–∏—Å–ª–µ–Ω–∏–µ
- –ö–æ–º–∏—Å—Å–∏—è 0%

### üè¶ –°–ë–ü (–°–∏—Å—Ç–µ–º–∞ –±—ã—Å—Ç—Ä—ã—Ö –ø–ª–∞—Ç–µ–∂–µ–π)
- –ü–µ—Ä–µ–≤–æ–¥—ã –ø–æ –Ω–æ–º–µ—Ä—É —Ç–µ–ª–µ—Ñ–æ–Ω–∞
- –ë–µ–∑ –∫–æ–º–∏—Å—Å–∏–∏
- –ú–≥–Ω–æ–≤–µ–Ω–Ω–æ–µ –∑–∞—á–∏—Å–ª–µ–Ω–∏–µ

### ‚Çø –ö—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç–∞
- Bitcoin, Ethereum, USDT
- –ê–Ω–æ–Ω–∏–º–Ω–æ—Å—Ç—å
- –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –¥–æ 30 –º–∏–Ω—É—Ç

### üí∞ –≠–ª–µ–∫—Ç—Ä–æ–Ω–Ω—ã–µ –∫–æ—à–µ–ª—å–∫–∏
- QIWI, YooMoney, WebMoney
- –ë—ã—Å—Ç—Ä—ã–µ –ø–µ—Ä–µ–≤–æ–¥—ã
- –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è –∫–æ–º–∏—Å—Å–∏—è

## –°—Ç–æ–∏–º–æ—Å—Ç—å

**500 —Ä—É–±–ª–µ–π** –∑–∞ 30 –¥–Ω–µ–π VIP –¥–æ—Å—Ç—É–ø–∞
          ` : `
# How to make payment

## Step 1: Payment initiation
1. Click "Pay for access" button
2. Choose convenient payment method
3. Follow payment system instructions

## Step 2: Confirmation
1. Take screenshot of successful payment
2. Send screenshot to bot
3. Wait for confirmation (up to 5 minutes)

## Payment methods

### üí≥ Bank cards
- Visa, MasterCard, –ú–ò–†
- Instant crediting
- 0% commission

### üè¶ SBP (Fast Payment System)
- Transfers by phone number
- No commission
- Instant crediting

### ‚Çø Cryptocurrency
- Bitcoin, Ethereum, USDT
- Anonymity
- Confirmation up to 30 minutes

### üí∞ Electronic wallets
- QIWI, YooMoney, WebMoney
- Fast transfers
- Minimal commission

## Cost

**500 rubles** for 30 days VIP access
          `
        }
      ]
    },
    'api': {
      title: language === 'ru' ? 'API –∏ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏' : 'API & Integrations',
      icon: <Code className="w-5 h-5" />,
      preview: language === 'ru' ? 'API –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è, webhook –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è' : 'API documentation, webhook integration',
      content: [
        {
          title: language === 'ru' ? 'API –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è' : 'API Documentation',
          content: `
# API ${language === 'ru' ? '–¥–ª—è —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤' : 'for developers'}

## ${language === 'ru' ? '–ë–∞–∑–æ–≤—ã–π URL' : 'Base URL'}
\`\`\`
https://api.vip-club.com/v1
\`\`\`

## ${language === 'ru' ? '–ê—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è' : 'Authentication'}
${language === 'ru' ? '–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ API –∫–ª—é—á –≤ –∑–∞–≥–æ–ª–æ–≤–∫–µ:' : 'Use API key in header:'}
\`\`\`
Authorization: Bearer YOUR_API_KEY
\`\`\`

## ${language === 'ru' ? '–û—Å–Ω–æ–≤–Ω—ã–µ —ç–Ω–¥–ø–æ–∏–Ω—Ç—ã' : 'Main endpoints'}

### ${language === 'ru' ? '–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è' : 'Check user status'}
\`\`\`http
GET /users/{telegram_id}/status
\`\`\`

**${language === 'ru' ? '–û—Ç–≤–µ—Ç:' : 'Response:'}**
\`\`\`json
{
  "telegram_id": 123456789,
  "vip_access": true,
  "expires_at": "2025-02-18T10:30:00Z",
  "access_level": "premium"
}
\`\`\`

### ${language === 'ru' ? '–°–æ–∑–¥–∞–Ω–∏–µ –ø–ª–∞—Ç–µ–∂–∞' : 'Create payment'}
\`\`\`http
POST /payments
\`\`\`

**${language === 'ru' ? '–¢–µ–ª–æ –∑–∞–ø—Ä–æ—Å–∞:' : 'Request body:'}**
\`\`\`json
{
  "telegram_id": 123456789,
  "amount": 500,
  "currency": "RUB",
  "payment_method": "card"
}
\`\`\`
          `
        }
      ]
    },
    'troubleshooting': {
      title: language === 'ru' ? '–†–µ—à–µ–Ω–∏–µ –ø—Ä–æ–±–ª–µ–º' : 'Troubleshooting',
      icon: <Video className="w-5 h-5" />,
      preview: language === 'ru' ? '–ß–∞—Å—Ç—ã–µ –ø—Ä–æ–±–ª–µ–º—ã, –∫–æ–Ω—Ç–∞–∫—Ç—ã –ø–æ–¥–¥–µ—Ä–∂–∫–∏' : 'Common issues, support contacts',
      content: [
        {
          title: language === 'ru' ? '–ß–∞—Å—Ç—ã–µ –ø—Ä–æ–±–ª–µ–º—ã' : 'Common Issues',
          content: language === 'ru' ? `
# –†–µ—à–µ–Ω–∏–µ —á–∞—Å—Ç—ã—Ö –ø—Ä–æ–±–ª–µ–º

## –ü—Ä–æ–±–ª–µ–º—ã —Å –¥–æ—Å—Ç—É–ø–æ–º

### –ù–µ –º–æ–≥—É –≤–æ–π—Ç–∏ –≤ VIP —á–∞—Ç
**–í–æ–∑–º–æ–∂–Ω—ã–µ –ø—Ä–∏—á–∏–Ω—ã:**
- VIP –¥–æ—Å—Ç—É–ø –∏—Å—Ç–µ–∫
- –°—Å—ã–ª–∫–∞ –Ω–µ–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–∞
- –¢–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ –ø—Ä–æ–±–ª–µ–º—ã Telegram

**–†–µ—à–µ–Ω–∏–µ:**
1. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Å—Ç–∞—Ç—É—Å VIP –≤ –ª–∏—á–Ω–æ–º –∫–∞–±–∏–Ω–µ—Ç–µ
2. –ó–∞–ø—Ä–æ—Å–∏—Ç–µ –Ω–æ–≤—É—é —Å—Å—ã–ª–∫—É —á–µ—Ä–µ–∑ –±–æ—Ç–∞
3. –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É

### –ë–æ—Ç –Ω–µ –æ—Ç–≤–µ—á–∞–µ—Ç
**–í–æ–∑–º–æ–∂–Ω—ã–µ –ø—Ä–∏—á–∏–Ω—ã:**
- –¢–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ —Ä–∞–±–æ—Ç—ã
- –í—ã—Å–æ–∫–∞—è –Ω–∞–≥—Ä—É–∑–∫–∞
- –ü—Ä–æ–±–ª–µ–º—ã —Å –∏–Ω—Ç–µ—Ä–Ω–µ—Ç–æ–º

**–†–µ—à–µ–Ω–∏–µ:**
1. –ü–æ–¥–æ–∂–¥–∏—Ç–µ 5-10 –º–∏–Ω—É—Ç
2. –ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç–µ –±–æ—Ç–∞ –∫–æ–º–∞–Ω–¥–æ–π /start
3. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ
          ` : `
# Solving common problems

## Access issues

### Can't enter VIP chat
**Possible causes:**
- VIP access expired
- Link is invalid
- Telegram technical issues

**Solution:**
1. Check VIP status in personal cabinet
2. Request new link through bot
3. Contact support

### Bot doesn't respond
**Possible causes:**
- Technical maintenance
- High load
- Internet problems

**Solution:**
1. Wait 5-10 minutes
2. Restart bot with /start command
3. Check internet connection
          `
        }
      ]
    }
  }

  const filteredContent = Object.entries(documentationSections).reduce((acc, [key, section]) => {
    const filteredItems = section.content.filter(item =>
      item.title.toLowerCase().includes(searchTerm.toLowerCase()) ||
      item.content.toLowerCase().includes(searchTerm.toLowerCase())
    )
    
    if (filteredItems.length > 0) {
      acc[key] = { ...section, content: filteredItems }
    }
    
    return acc
  }, {} as typeof documentationSections)

  // Highlight search matches
  const highlightText = (text: string, searchTerm: string) => {
    if (!searchTerm) return text
    
    const regex = new RegExp(`(${searchTerm})`, 'gi')
    return text.replace(regex, '<mark class="bg-yellow-400 text-black px-1 rounded">$1</mark>')
  }

  const downloadPDF = async () => {
    setIsLoading(true)
    try {
      const element = document.getElementById('documentation-content')
      if (!element) return

      const opt = {
        margin: 1,
        filename: `documentation-${language}.pdf`,
        image: { type: 'jpeg', quality: 0.98 },
        html2canvas: { scale: 2 },
        jsPDF: { unit: 'in', format: 'letter', orientation: 'portrait' }
      }

      await html2pdf().set(opt).from(element).save()
    } catch (error) {
      console.error('PDF generation failed:', error)
      alert(language === 'ru' ? '–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ PDF' : 'PDF generation error')
    } finally {
      setIsLoading(false)
    }
  }

  const handleSearch = (term: string) => {
    setSearchTerm(term)
    if (term.trim()) {
      saveSearchToHistory(term)
    }
  }

  // Custom markdown components
  const markdownComponents = {
    code: ({ node, inline, className, children, ...props }: any) => {
      const match = /language-(\w+)/.exec(className || '')
      return !inline ? (
        <pre className="bg-gray-800 rounded-lg p-4 overflow-x-auto my-4">
          <code className={`text-sm ${className || ''} text-green-400`} {...props}>
            {children}
          </code>
        </pre>
      ) : (
        <code className="bg-gray-700 px-2 py-1 rounded text-green-400 text-sm" {...props}>
          {children}
        </code>
      )
    },
    pre: ({ children }: any) => (
      <div className="bg-gray-800 rounded-lg p-4 overflow-x-auto my-4">
        {children}
      </div>
    )
  }

  return (
    <>
      <Helmet>
        <title>{t.documentation} - VIP Club</title>
        <meta name="description" content={language === 'ru' ? '–ü–æ–ª–Ω–∞—è –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è –ø–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é VIP Club —Å–∏—Å—Ç–µ–º—ã' : 'Complete documentation for VIP Club system usage'} />
        <meta property="og:title" content={`${t.documentation} - VIP Club`} />
        <meta property="og:description" content={language === 'ru' ? '–ü–æ–ª–Ω–∞—è –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è –ø–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é VIP Club —Å–∏—Å—Ç–µ–º—ã' : 'Complete documentation for VIP Club system usage'} />
        <meta name="viewport" content="width=device-width, initial-scale=1.0" />
      </Helmet>

      <div className="bg-white/5 backdrop-blur-lg rounded-2xl p-4 sm:p-6 border border-white/10">
        {/* Header */}
        <div className="flex flex-col sm:flex-row items-start sm:items-center justify-between mb-6 gap-4">
          <h3 className="text-lg sm:text-xl font-bold flex items-center gap-2">
            <Book className="w-5 h-5 sm:w-6 sm:h-6" />
            {t.documentation}
          </h3>
          <div className="flex items-center gap-2 sm:gap-4">
            <button
              onClick={() => setLanguage(language === 'ru' ? 'en' : 'ru')}
              className="bg-blue-500/20 text-blue-400 hover:bg-blue-500/30 px-3 py-2 rounded-lg text-sm flex items-center gap-2 transition-all duration-200"
              title={language === 'ru' ? 'Switch to English' : '–ü–µ—Ä–µ–∫–ª—é—á–∏—Ç—å –Ω–∞ —Ä—É—Å—Å–∫–∏–π'}
            >
              <Globe className="w-4 h-4" />
              {language === 'ru' ? 'EN' : 'RU'}
            </button>
            <button
              onClick={downloadPDF}
              disabled={isLoading}
              className="bg-emerald-500/20 text-emerald-400 hover:bg-emerald-500/30 disabled:opacity-50 px-3 py-2 rounded-lg text-sm flex items-center gap-2 transition-all duration-200"
            >
              <Download className={`w-4 h-4 ${isLoading ? 'animate-spin' : ''}`} />
              {t.downloadPDF}
            </button>
          </div>
        </div>

        {/* Search */}
        <div className="relative mb-4">
          <Search className="w-5 h-5 absolute left-3 top-1/2 transform -translate-y-1/2 text-gray-400" />
          <input
            type="text"
            placeholder={t.search}
            value={searchTerm}
            onChange={(e) => handleSearch(e.target.value)}
            className="w-full bg-gray-700 border border-gray-600 rounded-lg pl-10 pr-4 py-2 text-white text-sm sm:text-base transition-all duration-200 focus:border-emerald-500 focus:ring-1 focus:ring-emerald-500"
          />
        </div>

        {/* Search History */}
        {searchHistory.length > 0 && !searchTerm && (
          <div className="mb-6 p-4 bg-gray-700/30 rounded-lg">
            <div className="flex items-center justify-between mb-2">
              <h5 className="text-sm font-medium text-gray-300">{t.searchHistory}</h5>
              <button
                onClick={clearSearchHistory}
                className="text-xs text-gray-400 hover:text-white transition-colors"
              >
                {t.clearHistory}
              </button>
            </div>
            <div className="flex flex-wrap gap-2">
              {searchHistory.map((item, index) => (
                <button
                  key={index}
                  onClick={() => setSearchTerm(item.term)}
                  className="text-xs bg-gray-600 hover:bg-gray-500 text-gray-300 px-2 py-1 rounded transition-colors"
                >
                  {item.term}
                </button>
              ))}
            </div>
          </div>
        )}

        <div className="flex flex-col lg:flex-row gap-6">
          {/* Sidebar */}
          <div className="lg:w-64 flex-shrink-0">
            <nav className="space-y-2 lg:sticky lg:top-4">
              {Object.entries(documentationSections).map(([key, section]) => (
                <div
                  key={key}
                  className="relative"
                  onMouseEnter={() => setHoveredSection(key)}
                  onMouseLeave={() => setHoveredSection(null)}
                >
                  <button
                    onClick={() => setActiveSection(key as any)}
                    className={`w-full text-left p-3 rounded-lg transition-all duration-200 flex items-center gap-2 ${
                      activeSection === key
                        ? 'bg-emerald-500/20 text-emerald-400'
                        : 'text-gray-400 hover:text-white hover:bg-gray-700/50'
                    }`}
                  >
                    {section.icon}
                    <span className="text-sm sm:text-base">{section.title}</span>
                    <Eye className="w-4 h-4 ml-auto opacity-0 group-hover:opacity-100 transition-opacity" />
                  </button>
                  
                  {/* Tooltip */}
                  {hoveredSection === key && (
                    <div className="absolute left-full ml-2 top-0 z-10 bg-gray-800 text-white text-xs p-2 rounded-lg shadow-lg whitespace-nowrap animate-fadeIn">
                      {section.preview}
                    </div>
                  )}
                </div>
              ))}
            </nav>
          </div>

          {/* Content */}
          <div className="flex-1" id="documentation-content">
            {searchTerm ? (
              /* Search Results */
              <div className="animate-fadeIn">
                <h4 className="text-base sm:text-lg font-semibold mb-4">
                  {t.searchResults} "{searchTerm}"
                </h4>
                {Object.keys(filteredContent).length === 0 ? (
                  <p className="text-gray-400">{t.nothingFound}</p>
                ) : (
                  Object.entries(filteredContent).map(([sectionKey, section]) => (
                    <div key={sectionKey} className="mb-6">
                      <h5 className="font-medium text-emerald-400 mb-3">{section.title}</h5>
                      {section.content.map((item, index) => (
                        <div key={index} className="bg-gray-700/30 rounded-lg p-4 mb-3">
                          <h6 className="font-medium mb-2" dangerouslySetInnerHTML={{ __html: highlightText(item.title, searchTerm) }} />
                          <div className="text-sm text-gray-300">
                            <div dangerouslySetInnerHTML={{ __html: highlightText(item.content.substring(0, 200) + '...', searchTerm) }} />
                          </div>
                          <button
                            onClick={() => {
                              setActiveSection(sectionKey as any)
                              setSearchTerm('')
                            }}
                            className="text-emerald-400 hover:text-emerald-300 text-sm mt-2 transition-colors"
                          >
                            {t.readMore}
                          </button>
                        </div>
                      ))}
                    </div>
                  ))
                )}
              </div>
            ) : (
              /* Section Content */
              <div className="animate-fadeIn">
                <h4 className="text-base sm:text-lg font-semibold mb-4 flex items-center gap-2">
                  {documentationSections[activeSection].icon}
                  {documentationSections[activeSection].title}
                </h4>
                
                <div className="space-y-6">
                  {documentationSections[activeSection].content.map((item, index) => (
                    <div key={index} className="bg-gray-700/30 rounded-lg p-4 sm:p-6">
                      <h5 className="font-medium mb-4 text-emerald-400 text-sm sm:text-base">{item.title}</h5>
                      <div className="prose prose-invert max-w-none prose-sm sm:prose-base">
                        <ReactMarkdown
                          remarkPlugins={[remarkGfm]}
                          components={markdownComponents}
                          className="text-gray-300 leading-relaxed"
                        >
                          {item.content}
                        </ReactMarkdown>
                      </div>
                    </div>
                  ))}
                </div>
              </div>
            )}
          </div>
        </div>

        {/* Quick Links */}
        <div className="mt-8 pt-6 border-t border-gray-600">
          <h5 className="font-medium mb-4 text-sm sm:text-base">{t.usefulLinks}</h5>
          <div className="grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-3 gap-4">
            <a
              href="https://t.me/support_bot"
              target="_blank"
              rel="noopener noreferrer"
              className="bg-blue-500/20 text-blue-400 hover:bg-blue-500/30 p-3 rounded-lg flex items-center gap-2 transition-all duration-200 text-sm"
            >
              <ExternalLink className="w-4 h-4" />
              {t.telegramSupport}
            </a>
            <a
              href="mailto:support@vip-club.com"
              className="bg-emerald-500/20 text-emerald-400 hover:bg-emerald-500/30 p-3 rounded-lg flex items-center gap-2 transition-all duration-200 text-sm"
            >
              <ExternalLink className="w-4 h-4" />
              {t.emailSupport}
            </a>
            <a
              href="https://status.vip-club.com"
              target="_blank"
              rel="noopener noreferrer"
              className="bg-yellow-500/20 text-yellow-400 hover:bg-yellow-500/30 p-3 rounded-lg flex items-center gap-2 transition-all duration-200 text-sm"
            >
              <ExternalLink className="w-4 h-4" />
              {t.systemStatus}
            </a>
          </div>
        </div>

        {/* Print Styles */}
        <style jsx>{`
          @media print {
            .bg-white\/5,
            .bg-gray-700\/30,
            .bg-gray-700,
            .bg-gray-800 {
              background: white !important;
              color: black !important;
            }
            
            .text-white,
            .text-gray-300,
            .text-gray-400,
            .text-emerald-400 {
              color: black !important;
            }
            
            .border-white\/10,
            .border-gray-600 {
              border-color: #ccc !important;
            }
            
            button,
            .hover\\:bg-emerald-500\/30,
            .hover\\:bg-blue-500\/30,
            .hover\\:bg-yellow-500\/30 {
              display: none !important;
            }
          }
          
          .animate-fadeIn {
            animation: fadeIn 0.3s ease-in-out;
          }
          
          @keyframes fadeIn {
            from { opacity: 0; transform: translateY(10px); }
            to { opacity: 1; transform: translateY(0); }
          }
        `}</style>
      </div>
    </>
  )
}